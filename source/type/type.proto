package pbnavitia;

enum NavitiaType {
    LINE = 1;
    JOURNEY_PATTERN = 2;
    VEHICLE_JOURNEY = 3;
    STOP_POINT = 4;
    STOP_AREA = 5;
    NETWORK = 6;
    PHYSICAL_MODE = 7;
    COMMERCIAL_MODE = 8;
    CONNECTION = 9;
    JOURNEY_PATTERN_POINT = 10;
    COMPANY = 11;
    ROUTE = 12;
    POI = 13;
    ADDRESS = 18;
    POITYPE = 23;
    ADMINISTRATIVE_REGION = 22;
    CALENDAR = 25;
}


enum API {
    places = 1;
    PTREFERENTIAL = 2;
    PLANNER = 4;
    LOAD = 5; ///@deprecated
    places_nearby = 6;
    STATUS = 7;
    NEXT_DEPARTURES = 8;
    NEXT_ARRIVALS = 9;
    DEPARTURE_BOARDS = 10;
    ROUTE_SCHEDULES = 11;
    STOPS_SCHEDULES = 12;
    ISOCHRONE = 13;
    METADATAS = 14;
    place_uri = 15;
    UNKNOWN_API = 16;
    disruptions = 17;
    calendars = 18;
}

enum VehicleJourneyType{
    regular = 0;                 // ligne régulière
    virtual_with_stop_time = 1;       // TAD virtuel avec horaires
    virtual_without_stop_time = 2;    // TAD virtuel sans horaires
    stop_point_to_stop_point = 3;     // TAD rabattement arrêt à arrêt
    address_to_stop_point = 4;         // TAD rabattement adresse à arrêt
    odt_point_to_point = 5;           // TAD point à point (Commune à Commune)


    //regular = 0;
    //odt_with_stop_time = 1;
    //odt_with_zone = 2;
}

enum MessageStatus{
	information = 0;
	warning = 1;
	disrupt = 2;
}

enum ResponseStatus{
	none = 0;
	no_departure_this_day = 1;
	no_active_mode_this_day = 2;
	no_active_circulation_this_day = 3;
	no_direct_route_this_day = 4;
	no_departure_stoppoint = 5;
	terminus = 6;
	date_out_of_bound = 7;
}


message Code {
    required string type = 1;
    required string value = 2;
}
message Message{
    optional string uri 							= 1;
    optional string message 						= 2;
    optional string title 							= 3;
    optional string start_application_date 			= 4;
    optional string end_application_date 			= 5;
    optional string start_application_daily_hour 	= 6;
    optional string end_application_daily_hour 		= 7;    
    optional MessageStatus message_status 			= 8;
}

message GeographicalCoord {
    required double lon = 1;
    required double lat = 2;
}


message AdministrativeRegion {
    optional string uri = 2;
    optional string name  = 3;
    optional string zip_code = 4;
    optional int32 level = 5;
    optional GeographicalCoord coord = 6;
}

message StopArea {
    optional string name = 3;
    optional string uri = 4;
    optional GeographicalCoord coord = 5;
    repeated AdministrativeRegion administrative_regions = 10;
    repeated StopPoint stop_points = 8;
    repeated Message messages = 9;
    optional string comment = 11;
    repeated Code codes = 12;
}

message StopPoint {
    optional string name = 3;
    repeated AdministrativeRegion administrative_regions = 10;
    optional string uri = 5;
    optional GeographicalCoord coord = 6;
    optional StopArea stop_area = 7;
    optional hasEquipments has_equipments = 8;

    repeated Message messages = 9;
    optional string comment = 11;
    repeated Code codes = 12;
	optional Address address = 13;
    optional string platform_code = 14;	
}

message Line {
    optional string name = 3;
    optional string uri = 4;
    optional string code = 5;
    optional string color = 9;
    repeated Route routes = 10;
    optional CommercialMode commercial_mode = 11;
    repeated PhysicalMode physical_mode = 12;
    optional Network network = 13;

    repeated Message messages = 14;
    optional string comment = 15;
    repeated Code codes = 16;
}

message Route {
    optional string name = 3;
    optional string uri = 4;
    optional bool is_frequence = 5;
    optional Line line = 7;
    repeated JourneyPattern journey_patterns = 8;
    repeated Message messages = 9;
    repeated Code codes = 10;
}

message JourneyPattern {
    optional string name = 3;
    optional string uri = 4;
    optional bool is_frequence = 5;
    optional PhysicalMode physical_mode = 6;
    optional Route route = 7;

    repeated JourneyPatternPoint journey_pattern_points = 8;

    repeated Message messages = 9;
}

message Destination{
    required string uri = 1;
    optional string destination = 2;
}

message Note{
    required string uri = 1;
    optional string note = 2;
}

message Properties{
    enum AdditionalInformation{
        pick_up_only = 1;
        drop_off_only = 2;
        on_demand_transport = 3;
        date_time_estimated = 4;
    }
    repeated AdditionalInformation additional_informations= 1;
    repeated Note notes = 5;
    repeated CalendarException exceptions = 6;
    optional Destination destination = 7;
}

message hasEquipments{
    enum Equipment{
        has_wheelchair_accessibility = 1;
        has_bike_accepted = 2;
        has_air_conditioned = 3;
        has_visual_announcement = 4;
        has_audible_announcement = 5;
        has_appropriate_escort = 6;
        has_appropriate_signage = 7;
        has_school_vehicle = 8;
        has_wheelchair_boarding = 9;
        has_sheltered = 10;
        has_elevator = 11;
        has_escalator = 12;
        has_bike_depot = 13;
    }
    repeated Equipment has_equipments = 1;
}

message StopDateTime {
    optional string arrival_date_time = 1;
    optional string departure_date_time = 2;
    optional StopPoint stop_point = 3;
    optional Properties properties = 4;
}


message StopTime {
    optional string arrival_time = 1;
    optional string departure_time = 3;
    optional VehicleJourney vehicle_journey = 4;
    optional JourneyPatternPoint journey_pattern_point = 5;
    optional bool pickup_allowed = 6;
    optional bool drop_off_allowed = 7;
}

message VehicleJourney {
    optional string name = 3;
    optional string uri = 4;
    repeated StopTime stop_times = 6;
    optional Route route = 7;
    optional JourneyPattern journey_pattern = 8;

    repeated Message messages = 10;

    optional bool is_adapted = 11;
    optional ValidityPattern validity_pattern = 12;
    optional ValidityPattern adapted_validity_pattern = 13;
    optional string odt_message = 14;
    optional VehicleJourneyType vehicle_journey_type = 15;

    optional bool wheelchair_accessible = 16;
    optional bool bike_accepted = 17;
    optional bool air_conditioned = 18;
    optional bool visual_announcement = 19;
    optional bool audible_announcement = 20;
    optional bool appropriate_escort = 21;
    optional bool appropriate_signage = 22;
    optional bool school_vehicle = 23;
    optional string comment = 24;
    repeated Code codes = 25;
}

message JourneyPatternPoint{
    optional string uri = 3;
    optional int32 order = 4;
    optional StopPoint stop_point = 5;
    optional JourneyPattern journey_pattern = 6;

    repeated Message messages = 7;
}

message Contributor {
    optional string uri = 1;
    optional string name = 2;
}

message PoiType {
    optional string uri = 1;
    optional string name = 2;
}

message Poi {
    optional string uri = 3;
    optional string name = 4;
    optional GeographicalCoord coord = 6;
    optional PoiType poi_type = 7;
    repeated AdministrativeRegion administrative_regions = 10;
    optional Address address = 11;
    repeated Code properties = 12;
}

message Network {
    optional string uri 		= 3;
    optional string name 		= 4;
    repeated Line lines 		= 5;
    repeated Message messages 	= 6;
    repeated Code codes         = 7;
}

message PhysicalMode {
    optional string uri = 3;
    optional string name = 4;
    repeated CommercialMode commercial_modes = 5;
}

message CommercialMode {
    optional string uri = 3;
    optional string name = 4;
    repeated PhysicalMode physical_modes = 5;
}

message Connection {
    optional StopPoint origin = 1;
    optional StopPoint destination = 2;
    optional int32 seconds = 3;
}

message Company {
    optional string uri = 3;
    optional string name = 4;
    repeated Code codes   = 8;
}

message Address {
    optional string uri = 3;
    optional string name = 4;
    optional GeographicalCoord coord = 6;
    repeated AdministrativeRegion administrative_regions = 10;
    optional int32 house_number = 2;
}

enum ExceptionType {
    Add = 0;
    Remove = 1;
}

message CalendarException {
    optional string uri = 1;
    optional string date = 2;
    optional ExceptionType type = 3;
}

message CalendarPeriod {
    optional string begin = 1;
    optional string end = 2;
}

message WeekPattern {
    optional bool monday = 1;
    optional bool tuesday = 2;
    optional bool wednesday = 3;
    optional bool thursday = 4;
    optional bool friday = 5;
    optional bool saturday = 6;
    optional bool sunday = 7;
}

message Calendar{
    optional string uri = 1;
    optional string name = 2;
    optional WeekPattern week_pattern = 3;
    repeated CalendarPeriod active_periods = 4;
    repeated CalendarException exceptions = 5;
    optional ValidityPattern validity_pattern = 6;
    repeated Code codes = 7;
}

message ValidityPattern {
    optional string beginning_date = 1;
    optional string days = 2;
}

